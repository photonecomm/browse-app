def label = "worker-${UUID.randomUUID().toString()}"
podTemplate(label: label, containers: [
  containerTemplate(name: 'nodejs-test', image: 'neugcstieacr01.azurecr.io/baseimg/build-zulu8-nodejs6-bionic:v1', command: 'cat', ttyEnabled: true)
],
volumes: [
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
]) {
	node(label) {
		container('nodejs-test') {
			properties([
				[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', numToKeepStr: '10']]
			])
			stage('Clone') {
				dir('browse-app') {
					checkout scm
					sh 'npm install'
				}
			}

			stage('CSS Lint') {
				try {
					dir('browse-app') {
						sh 'npm run csslint'
					}
				} catch (exc) {
					checkstyle canComputeNew: false, defaultEncoding: '', healthy: '', pattern: 'reports/*.xml', unHealthy: ''
					// currentBuild.result = "FAILURE"
					// throw exc
				} finally {

				}
			}

			stage('JS Lint') {
				dir('browse-app') {
					try {
						sh 'npm run jslint'
					} catch (exc) {
						// currentBuild.result = "FAILURE"
						// throw exc
					} finally {
						checkstyle canComputeNew: false, defaultEncoding: '', healthy: '', pattern: 'reports/*.xml', unHealthy: ''
					}
				}
			}

			stage('Unit Test') {
				dir('browse-app') {
					try {
						sh 'npm run unit-test'
					} catch (exc) {
						// currentBuild.result = "FAILURE"
						// throw exc
					} finally {
						publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'test/unit/reports/coverage', reportFiles: 'index.html', reportName: 'Unit Test Coverage', reportTitles: 'Coverage'])
						publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'test/unit/reports/status', reportFiles: 'index.html', reportName: 'Unit Test Results', reportTitles: 'TestReport'])
					}
				}
			}

			stage ('Build') {
				try {
					dir('browse-app') {
						sh 'npm run build-prod ; npm run pack'
						sh "docker build --no-cache -f deployment/Dockerfile -t ecomm-app:${env.BUILD_NUMBER} ."
						sh "docker tag ecomm-app:${env.BUILD_NUMBER} neugcstieacr01.azurecr.io/sample-apps:${env.BUILD_NUMBER}"
						sh 'docker login --username=neugcstieacr01 --password="fYQDKCiuImfahaLM+lQp0FvYS3mqhGDf" https://neugcstieacr01.azurecr.io/sample-apps'
						sh "docker push neugcstieacr01.azurecr.io/sample-apps:${env.BUILD_NUMBER}"
					}
				} catch (exc) {
					currentBuild.result = "FAILURE"
					throw exc
				} finally {

				}
			}

			/*stage('Send Success Mail') {
				mail body: "util-app Build Success: ${env.BUILD_URL}" ,
				from: 'test@test.com',
				replyTo: 'test@test.com',
				subject: "util-app Build completed Successfully #${env.BUILD_NUMBER}",
				to: 'test@test.com'
			}*/
		}
	}
}
